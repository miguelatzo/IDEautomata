
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 04 13:29:15 CST 2016
//----------------------------------------------------

package automata;

import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.*;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/** CUP v0.10k generated parser.
  * @version Sun Dec 04 13:29:15 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\004\005\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\007\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\004\005\005\001\002\000\004\002\026\001" +
    "\002\000\012\006\007\007\011\010\010\011\012\001\002" +
    "\000\014\006\007\007\011\010\010\011\012\012\024\001" +
    "\002\000\004\013\017\001\002\000\004\004\016\001\002" +
    "\000\004\004\015\001\002\000\004\004\014\001\002\000" +
    "\014\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\001\002" +
    "\000\014\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\001" +
    "\002\000\014\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\001\002\000\014\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\001\002\000\004\015\021\001\002\000\004\014\022" +
    "\001\002\000\004\014\ufff9\001\002\000\004\004\023\001" +
    "\002\000\014\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\001\002\000\004\002\001\001\002\000\014\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\004\004\003\001\001\000\002\001\001\000" +
    "\006\005\005\006\012\001\001\000\004\006\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main ( String args[] ) throws Exception {
		new parser(new Scanner(new FileReader(args[0]))).parse();
	}
	public void syntax_error(Symbol s){
		if(s.left == -1)
                    aut.conexion.imprimirErrores("\nerror fatal en estructura de Inicio - Fin");
		else
			aut.conexion.imprimirErrores("\nerror en la linea: " + (s.left + 1));
	}

	public void report_fatal_error(String message, Object info){
		//report_error("ID de error: " +info.toString(),null);
		if("#0".equals(info.toString())){aut.conexion.imprimirErrores("(0)error lexico en el token de apertura o cierre");}
		if("#1".equals(info.toString())){aut.conexion.imprimirErrores("ERROR");}
		if("#2".equals(info.toString())){aut.conexion.imprimirErrores("(0)palabra reservada incompleta o mal escrita\n(1)punto y coma innecesario\n(2)estructura de programa sin instrucciones validas");}
		if("#3".equals(info.toString())){aut.conexion.imprimirErrores("(0) token Inicio faltante");}
		if("#4".equals(info.toString())){aut.conexion.imprimirErrores("error lexico en palabra reservada,\n(0)verifique mayusculas,\n(1)tokens incompletos\n(2)punto y coma faltante");}
		if("#5".equals(info.toString())){aut.conexion.imprimirErrores("(0)punto y coma faltante\n(1)palabra reservada incompleta\n");}
		if("#6".equals(info.toString())){aut.conexion.imprimirErrores("(0)punto y coma faltante");}
		if("#7".equals(info.toString())){aut.conexion.imprimirErrores("(0)error en la funcion Activa");}
		if("#8".equals(info.toString())){aut.conexion.imprimirErrores("(0)punto y coma faltante\n(1)estructura de programa sin instrucciones validas");}
		if("#9".equals(info.toString())){aut.conexion.imprimirErrores("(0)no se pudo localizar la funcion");}
		if("#10".equals(info.toString())){aut.conexion.imprimirErrores("(0)argumento invalido en la funcion");}
		if("#11".equals(info.toString())){aut.conexion.imprimirErrores("(0)caracter invalido");}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions{

  private final parser parser;
  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // numero ::= NUMBER 
            {
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=n; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*numero*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= AVANZA LPAREN numero RPAREN SEMI 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		/*System.out.println("Avanza "+ e); */
                for (int i = 0; i < e; i++) {
                    moves av = new moves("avanza");
                    aut.moves.add(av);
                }
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= ACTIVA SEMI 
            {
              Object RESULT = null;
		/* System.out.println("Activa LED");*/
                moves av = new moves("activa");
                aut.moves.add(av);
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= GIZQUIERDA SEMI 
            {
              Object RESULT = null;
		 /*System.out.println("Giro a la izquierda");*/
                 moves av = new moves("girarizquierda");
                 aut.moves.add(av);
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= GDERECHA SEMI 
            {
              Object RESULT = null;
		 /*System.out.println("Giro a la derecha");*/
                 moves av = new moves("girarderecha");
                 aut.moves.add(av);
               CUP$parser$result = new java_cup.runtime.Symbol(4/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= expresion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*instrucciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones expresion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*instrucciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= orden EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // orden ::= INICIO instrucciones FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*orden*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

